#!/usr/bin/env python

import sys
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from src.util import GetiRODSSession
from src.manage_acl import PermissionManager


desc = """Adds permission(ACL - own/write/read/null) on an iRODS
path provided for a user or group. Adding 'null' permission means
removing the permission for the user in question. Hence it removes
permissions of a user/group. Recursive option can be used to apply
changes from top to down.

Example:
iacl-add read userBob /tempZone/home/rods/data_obj.txt
iacl-add null group_A /tempZone/home/rods/project
"""

if len(sys.argv) < 2:
    print('You need to specify an option/argument/parameter!')
    print('Check iacl-add --help or -h for more information.')
    sys.exit()

arg_parser = ArgumentParser(description=desc,
                            formatter_class=RawDescriptionHelpFormatter)

arg_parser.add_argument('args', nargs='*',
                        help='Provide an absolute iRODS path - collection or data object')

arg_parser.add_argument('-r', '--recursive', action='store_false',
                        help='Provide an absolute iRODS collection path for recursive operatiion')

args = arg_parser.parse_args()

acl_type = args.args[0]
irods_path = args.args[-1]
users = args.args[1:-1]

with GetiRODSSession() as session:
    for user in users:
        if acl_type and irods_path:
            permission_set = PermissionManager(session, target_path=irods_path)
            permission_set.set_acl(user, acl_type)

        if args.recursive == False:
            permission_set = PermissionManager(session, target_path=irods_path)
            permission_set.set_acl(user, acl_type, recursive=True)
